#!/usr/bin/env python
import logging
import os
import shutil
import sys
import tarfile
import time
import traceback
from pathlib import Path

import click
import ipdb
import requests
from tqdm import tqdm
from urllib3 import HTTPResponse

from archpi import cmd, config, log
from archpi.img import losetup_img, mount_disks
from archpi.tqdm import file_progress, stream_response

B = 1
KB = B * 1024
MB = KB * 1024
GB = MB * 1024

block = b'\0' * MB

rootfs_url = 'http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz'
rootfs_name = rootfs_url.split('/')[-1]

script = Path(__file__)
out = Path('out')
tmp = out / 'tmp'


@click.command()
@click.option('--img-size-gb', default=2.5)
def main(img_size_gb):
    log.setup()

    out = Path(os.environ['TASK_OUTPUT']).absolute()
    tmp.mkdir(parents=True, exist_ok=True)
    out_img = out / script.name

    rootfs_path = tmp / rootfs_name
    disk = tmp / script.name
    if not rootfs_path.exists():
        with rootfs_path.open('wb') as f:
            response = requests.get(rootfs_url, stream=True)
            raw: HTTPResponse = response.raw
            stream_response(raw, desc='downloading rootfs')
            while chunk := raw.read(MB):
                f.write(chunk)
    with disk.open(mode='wb') as f:
        size = int(img_size_gb * GB) // len(block)
        for _ in tqdm(range(size), total=size, desc=f'Filling {disk}',
                      unit='block', unit_scale=True):
            f.write(block)
    with losetup_img(disk) as lo, \
            mount_disks(format_disk(lo), *config.partition_layout) as mnt, \
            rootfs_path.open('rb') as fp, \
            tarfile.open(
                fileobj=file_progress(fp, desc='reading archive', total=rootfs_path.stat().st_size),
                mode='r|gz') as tar:
        tar.extractall(path=mnt)

        fstab = mnt / 'etc/fstab'
        fstab.write_text(fstab.read_text().replace('mmcblk0', 'mmcblk1'))
    shutil.move(disk, out_img)


def format_disk(lo: Path):
    assert config.partition_layout == ['/boot', '/']
    # see https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4
    cmd.run('fdisk', lo, input='\n'.join([
        *'n p 1 \0 +200M t c'.split(),
        *'n p 2 \0 \0'.split(),
        'w'
    ]).replace('\0', ''), check=True, encoding='utf8')
    cmd.run('sync')
    while not (part := lo.with_name(f'{lo.name}p1')).exists():
        logging.info(f'{part} not yet available...')
        time.sleep(5)
    cmd.run('mkfs.vfat', f'{lo}p1')
    cmd.run('mkfs.ext4', f'{lo}p2')
    return lo




if __name__ == '__main__':
    try:
        main()
    except Exception:
        extype, value, tb = sys.exc_info()
        traceback.print_exc()
        ipdb.post_mortem(tb)
